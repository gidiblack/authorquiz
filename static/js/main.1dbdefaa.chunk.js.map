{"version":3,"sources":["AuthorQuiz.js","serviceWorker.js","index.js"],"names":["Hero","className","Book","title","onClick","Turn","author","books","highlight","onAnswerSelected","style","backgroundColor","highlightToBgColor","src","imageUrl","alt","map","key","Continue","show","onContinue","Footer","id","to","href","AuthorQuiz","connect","state","turnData","dispatch","answer","type","Boolean","window","location","hostname","match","authors","name","imageSource","getTurnData","allBooks","reduce","p","c","i","concat","fourRandomBooks","shuffle","slice","sample","find","some","store","Redux","action","isCorrect","book","Object","assign","ReactDOM","render","StrictMode","Fragment","exact","path","component","JSON","stringify","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAOA,SAASA,IACP,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,6BACb,2CACA,4EAMR,SAASC,EAAT,GAAgC,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,QACpB,OACE,yBAAKH,UAAU,SAASG,QAAS,WAAOA,EAAQD,KAC9C,4BAAKA,IAKX,SAASE,EAAT,GAA6D,IAA9CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,iBAUvC,OACE,yBAAKR,UAAU,WAAWS,MAAO,CAACC,gBAVpC,SAA4BH,GAM1B,MALgB,CACd,KAAQ,GACR,QAAW,UACX,MAAS,WAEIA,GAIoCI,CAAmBJ,KACpE,yBAAKP,UAAU,kBACb,yBAAKY,IAAKP,EAAOQ,SAAUb,UAAU,cAAcc,IAAI,YAEzD,yBAAKd,UAAU,SACZM,EAAMS,KAAI,SAACb,GAAD,OAAW,kBAACD,EAAD,CAAMC,MAAOA,EAAOc,IAAKd,EAAOC,QAASK,SAiBvE,SAASS,EAAT,GAAyC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WACxB,OACE,yBAAKnB,UAAU,gBACZkB,EAAO,yBAAKlB,UAAU,UACrB,4BAAQA,UAAU,qCAAqCG,QAASgB,GAAhE,aAEA,MAKR,SAASC,IACP,OACE,yBAAKC,GAAG,SAASrB,UAAU,OACzB,yBAAKA,UAAU,mBACb,2BAAG,kBAAC,IAAD,CAAMsB,GAAG,QAAT,iBAAH,KACA,uBAAGtB,UAAU,qBAAb,uBAAqD,uBAAGuB,KAAK,sCAAR,qBAArD,mCAwBR,IAYeC,EAZIC,aAlBnB,SAAyBC,GACvB,MAAO,CACLC,SAAUD,EAAMC,SAChBpB,UAAWmB,EAAMnB,cAIrB,SAA4BqB,GAC1B,MAAM,CACJpB,iBAAkB,SAACqB,GACjBD,EAAS,CAAEE,KAAM,kBAAmBD,YAEtCV,WAAY,WACVS,EAAS,CAAEE,KAAM,iBAKJL,EACnB,YAAgE,IAArDE,EAAoD,EAApDA,SAAUpB,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,iBAAkBW,EAAa,EAAbA,WAC9C,OACE,yBAAKnB,UAAU,mBACb,kBAACD,EAAD,MACA,kBAACK,EAAD,iBAAUuB,EAAV,CAAoBpB,UAAWA,EAAWC,iBAAkBA,KAC5D,kBAACS,EAAD,CAAUC,KAAoB,YAAdX,EAAyBY,WAAYA,IACrD,kBAACC,EAAD,UC9FYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCPAC,EAAU,CACd,CACEC,KAAM,aACNxB,SAAU,wBACVyB,YAAa,oBACbhC,MAAO,CAAC,qCAAqC,0BAA2B,gBACxE,CACA+B,KAAM,eACNxB,SAAU,0BACVyB,YAAa,oBACbhC,MAAO,CAAC,KAAM,cAAe,iBAC7B,CACA+B,KAAM,eACNxB,SAAU,wBACVyB,YAAa,oBACbhC,MAAO,CAAC,eAAgB,iBACxB,CACA+B,KAAM,kBACNxB,SAAU,6BACVyB,YAAa,oBACbhC,MAAO,CAAC,eAAgB,sBACxB,CACA+B,KAAM,gBACNxB,SAAU,2BACVyB,YAAa,oBACbhC,MAAO,CAAC,cAAe,iBACvB,CACA+B,KAAM,iBACNxB,SAAU,qBACVyB,YAAa,oBACbhC,MAAO,CAAC,oBAAqB,0BAC7B,CACA+B,KAAM,qBACNxB,SAAU,2BACVyB,YAAa,oBACbhC,MAAO,CAAC,oBAAqB,sBAC7B,CACA+B,KAAM,gBACNxB,SAAU,2BACVyB,YAAa,oBACbhC,MAAO,CAAC,sBAAuB,sBAC/B,CACA+B,KAAM,eACNxB,SAAU,0BACVyB,YAAa,oBACbhC,MAAO,CAAC,6BAA8B,2BACtC,CACA+B,KAAM,sBACNxB,SAAU,iCACVyB,YAAa,oBACbhC,MAAO,CAAC,UAAW,UAAW,sBAIlC,SAASiC,EAAYH,GAEnB,IAAMI,EAAWJ,EAAQK,QAAO,SAAUC,EAAGC,EAAGC,GAC9C,OAAOF,EAAEG,OAAOF,EAAErC,SACjB,IAEGwC,EAAkBC,YAAQP,GAAUQ,MAAM,EAAE,GAC5CnB,EAASoB,YAAOH,GAEtB,MAAO,CACLxC,MAAOwC,EACPzC,OAAQ+B,EAAQc,MAAK,SAAC7C,GAAD,OACjBA,EAAOC,MAAM6C,MAAK,SAACjD,GAAD,OAClBA,IAAU2B,SAuBlB,IAAIuB,EAAQC,KAlBZ,WACQ,IADS3B,EACV,uDADiB,CAAEU,UAAST,SAAUY,EAAYH,GAAU7B,UAAW,IAC9E+C,EAAO,uCACH,OAAQA,EAAOxB,MACb,IAAK,kBACH,IAAMyB,EAAY7B,EAAMC,SAAStB,OAAOC,MAAM6C,MAAK,SAACK,GAAD,OAAUA,IAASF,EAAOzB,UAC7E,OAAO4B,OAAOC,OACZ,GAAIhC,EAAO,CACTnB,UAAWgD,EAAY,UAAY,UAEzC,IAAK,WACH,OAAOE,OAAOC,OAAO,GAAIhC,EAAO,CAC9BnB,UAAW,GACXoB,SAAUY,EAAYb,EAAMU,WAEhC,QAAS,OAAOV,MAmBtBiC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAVxC,WACE,OAAO,kBAAC,IAAD,CAAqBb,MAAOA,GACjC,kBAAC,EAAD,UASI,kBAAC,IAAD,CAAOY,KAAK,OAAOC,UAlB3B,YAAgC,IAAR9B,EAAO,EAAPA,MACtB,OAAO,6BACL,0CACA,2BAAI+B,KAAKC,UAAUhC,WAmBrBiC,SAASC,eAAe,SDMpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1dbdefaa.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types'; \nimport './AuthorQuiz.css';\nimport './bootstrap.min.css';\n\nfunction Hero() {\n  return (\n    <div className=\"row\">\n      <div className=\"jumbotron col-10 offset-1\">\n        <h1>Author Quiz</h1>\n        <p>Select the book written by the author shown</p>\n      </div>\n    </div>\n  );\n}\n\nfunction Book({title, onClick}){\n  return (\n    <div className=\"answer\" onClick={() => {onClick(title);}} >\n      <h4>{title}</h4>\n    </div>\n  )\n}\n\nfunction Turn({author, books, highlight, onAnswerSelected}) {\n  function highlightToBgColor(highlight){\n    const mapping = {\n      'none': '',\n      'correct': '#339733',\n      'wrong': '#d00811'\n    };\n    return mapping[highlight];\n  }\n\n  return(\n    <div className=\"row turn\" style={{backgroundColor: highlightToBgColor(highlight)}}>\n      <div className=\"col-4 offset-1\">\n        <img src={author.imageUrl} className=\"authorimage\" alt=\"Author\"/>\n      </div>\n      <div className=\"col-6\">\n        {books.map((title) => <Book title={title} key={title} onClick={onAnswerSelected} />)}\n      </div>\n    </div>\n  );\n}\nTurn.propTypes = {\n  author: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    imageUrl: PropTypes.string.isRequired,\n    imageSource: PropTypes.string.isRequired,\n    books: PropTypes.arrayOf(PropTypes.string).isRequired\n  }),\n  books: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onAnswerSelected: PropTypes.func.isRequired,\n  highlight: PropTypes.string\n}\n\nfunction Continue({ show, onContinue }) {\n  return(\n    <div className=\"row continue\">\n      {show ? <div className=\"col-11\">\n        <button className=\"btn btn-primary btn-lg float-right\" onClick={onContinue} >Continue</button>\n      </div>\n      : null }\n    </div>\n  );\n}\n\nfunction Footer() {\n  return(\n    <div id=\"footer\" className=\"row\">\n      <div className=\"col-10 offset-1\">\n        <p><Link to='/add'>Add an author</Link> </p>\n        <p className=\"text-muted credit\">All images are from <a href=\"http://commons.wikipedia.org/wiki/\">Wikimedia Commons</a> and are in the public domain</p>\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state){\n  return {\n    turnData: state.turnData,\n    highlight: state.highlight\n  };\n}\n\nfunction mapDispatchToProps(dispatch){\n  return{\n    onAnswerSelected: (answer) => {\n      dispatch({ type: 'ANSWER_SELECTED', answer });\n    },\n    onContinue: () => {\n      dispatch({ type: 'CONTINUE'});\n    }\n  };\n}\n\nconst AuthorQuiz = connect(mapStateToProps, mapDispatchToProps)(\nfunction ({turnData, highlight, onAnswerSelected, onContinue}) {\n    return (\n      <div className=\"container-fluid\">\n        <Hero/>\n        <Turn {...turnData} highlight={highlight} onAnswerSelected={onAnswerSelected} />\n        <Continue show={highlight === 'correct'} onContinue={onContinue} />\n        <Footer />\n      </div>\n    );\n});\n\nexport default AuthorQuiz;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport * as Redux from 'redux';\nimport * as ReactRedux from 'react-redux';\nimport './index.css';\nimport AuthorQuiz from './AuthorQuiz';\n// import * as serviceWorker from './serviceWorker';\nimport { unregister } from './serviceWorker';\nimport {shuffle, sample} from 'underscore';\n\nconst authors = [\n  {\n    name: 'Mark Twain',\n    imageUrl: 'images/mark-twain.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['The Adventures of Huckleberry Finn','Life on the Mississippi', 'Roughing It']\n  },{\n    name: \"Stephen King\",\n    imageUrl: 'images/stephen-king.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['IT', 'The Shining', 'Pet Cemetary']\n  },{\n    name: \"J.K. Rowling\",\n    imageUrl: 'images/jk-rowling.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['Harry Potter', 'The Silkworm']\n  },{\n    name: \"Charles Dickens\",\n    imageUrl: 'images/charles-dickens.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['Oliver Twist', 'David Copperfield']\n  },{\n    name: \"George Orwell\",\n    imageUrl: 'images/george-orwell.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['Animal Farm', 'Burmese Days']\n  },{\n    name: \"J.R.R. Tolkien\",\n    imageUrl: 'images/Tolkien.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['Lord of the Rings', 'The Children of Hurin']\n  },{\n    name: \"George R.R. Martin\",\n    imageUrl: 'images/george-martin.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['A Game of Thrones', 'A Storm of Swords']\n  },{\n    name: \"Chinua Achebe\",\n    imageUrl: 'images/chinua-achebe.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['A Man of the People', 'Things Fall Apart']\n  },{\n    name: \"Wole Soyinka\",\n    imageUrl: 'images/wole-soyinka.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['The Trials of Brother Jero', 'A Shuttle in the Crypt']\n  },{\n    name: \"William Shakespeare\",\n    imageUrl: 'images/william-shakespeare.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['Macbeth', 'Othello', 'Romeo and Juliet']\n  }\n];\n\nfunction getTurnData(authors){\n  //concatunate author books\n  const allBooks = authors.reduce(function (p, c, i){\n    return p.concat(c.books);\n  }, []);\n  //shuffle books with underscore\n  const fourRandomBooks = shuffle(allBooks).slice(0,4);\n  const answer = sample(fourRandomBooks);\n\n  return {\n    books: fourRandomBooks,\n    author: authors.find((author) =>\n        author.books.some((title) =>\n        title === answer ))\n  }\n}\n\n// Redux Reducer function\nfunction reducer(state ={ authors, turnData: getTurnData(authors), highlight: '' }, \naction){\n    switch (action.type) {\n      case 'ANSWER_SELECTED':\n        const isCorrect = state.turnData.author.books.some((book) => book === action.answer); \n        return Object.assign(\n          {}, state, {\n            highlight: isCorrect ? 'correct' : 'wrong'\n          });\n      case 'CONTINUE':\n        return Object.assign({}, state, {\n          highlight: '',\n          turnData: getTurnData(state.authors)\n        });\n      default: return state;\n    }\n}\n\nlet store = Redux.createStore(reducer);\n\nfunction AddAuthorForm({match}){\n  return <div>\n    <h1>Add Author</h1>\n    <p>{JSON.stringify(match)}</p>\n  </div>;\n}\n\nfunction App() {\n  return <ReactRedux.Provider store={store}>\n    <AuthorQuiz />\n  </ReactRedux.Provider>;\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <React.Fragment>\n        <Route exact path=\"/authorquiz\" component={App} />\n        <Route path=\"/add\" component={AddAuthorForm} />\n      </React.Fragment>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nunregister();\n"],"sourceRoot":""}